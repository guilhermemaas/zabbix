#Cache do Front-end:
É o serviço do Syncer que gerencia, atualiza a cada 60 segundos.

ps aux | grep zabbix | grep "configuration syncer"
zabbix      1700  0.0  0.3 186340  7316 ?        S    14:12   0:06 /usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.070592 sec, idle 60 sec]

=========================================
#Zabbix Server CLI:
=========================================
zabbix_server -R config_cache_reload
1700:20201022:221349.416 forced reloading of the configuration cache -> Zabbix LOG
#R - Run Time Control

zabbix_server -R housekeeper_execute
 1701:20201022:221526.434 housekeeper [deleted 0 hist/trends, 0 items/triggers, 0 events, 0 problems, 0 sessions, 0 alarms, 0 audit, 0 records in 0.00805

 #zabbix_server --help

 grep -i debug /etc/zabbix/zabbix_server.conf

 ### Option: DebugLevel
#       Specifies debug level:
#        4 - for debugging (produces lots of information)
#       5 - extended debugging (produces even more information)
#  DebugLevel=3
#       Only works if DebugLevel set to 3, 4 or 5.

#Aumenta log level
zabbix_server -R log_level_increse

#Diminui log level
zabbix_server -R log_level_decrease

#Seta um log level específico
zabbix_server -R log_level_increase=3

#Sobre um nível de log level para um serviço específico:
zabix_server log_level_increase="configuration syncer"
###
[root@localhost ~]# zabbix_server -R log_level_increase="configuration syncer"
zabbix_server [12898]: command sent successfully
[root@localhost ~] tail -f -n 1 /var/log/zabbix/zabbix_server.log
1700:20201022:225209.976 log level has been increased to 4 (debug)


=========================================
#Zabbix Agent CLI:
=========================================
Porta padrão do Zabbix Agent: 10051.

#Printa todas as opções
zabbix_agentd -p
zabbix_agentd -p | less

#Testa uma chave localmente
zabbix_agentd -t system.cpu.num
system.cpu.num                                [u|1]
root@localhost ~]# zabbix_agentd -t system.cpu.num[max]
system.cpu.num[max]                           [u|1]
[root@localhost ~]# zabbix_agentd -t system.cpu.num[online]
system.cpu.num[online]                        [u|1]

--
top | head -n1
top - 07:12:42 up 16 min,  2 users,  load average: 0,03, 0,11, 0,11
                                                   1min, 5min, 15min

#Gerar um processamento para teste:
cat /dev/random | md5sum
--
zabbix_agentd -t system.hostname
[root@localhost ~]# zabbix_agentd -t system.hostname
system.hostname                               [s|localhost.localdomain]
[root@localhost ~]# zabbix_agentd -t system.uname
system.uname                                  [s|Linux localhost.localdomain 4.18.0-193.el8.x86_64 #1 SMP Fri May 8 10:59:10 UTC 2020 x86_64]

#Retorna versao
zabbix_agentd -V 


=========================================
#Triggers:
=========================================
Triggers expression:
https://www.zabbix.com/documentation/4.0/pt/manual/config/triggers/expression

{<server>:<key>.<function>(<parameter>)}<operator><constant>
<server> = host
<key> = cahve unica do item
<function> = funcoes (last,avg, etc)
    sum(#5) = Soma dos últimos cinco valores.
    last(#2) = Penúltimo valor coletado.
    sum(600) = Sumarização de todos os itens nos últimos 600 segundos.
(<parameters>) = Parametros

Dependência de triggers:
https://www.zabbix.com/documentation/4.0/pt/manual/config/triggers/dependencies


=========================================
#Macros:
=========================================
Macros: 
{HOST.NAME} - XPTO ({ITEM.VALUE}) - Acima de {$CPU_HIGH}

Três tipos:
Padrão: {MACRO} 
Usuário: {$MACRO}
    Global: Administration > General > Macros, Template, Host
    Host sobescreve da template, e template sobescreve global. Host > Template < Global
LLD: {#MACRO}

=========================================
#Proxy:
=========================================
Zabbix Proxy precisa estar na mesma versão do Zabbix Server
Server 5.0 e Proxy 5.0 - Fuciona.
Server 5.0 e Proxy 4.4 - Não funciona.

-------------
Passivo: O Zabbix Server conecta no Zabbix Proxy e envia as configurações.
Porta padrão do Zabbix Proxy: 10051.
No arquivo de configuração do Zabbix ServeR(zabbix_server.conf).

#StartProxyPollers=1
#ProxyConfigFrequency=3600
#ProxyDataFrequency=1

-------------
Ativo(Padrão): O Zabbix Proxy conecta no Zabbix Server e solicita as configurações.

---Instalação no CentOS 8:
rpm -ivh http://repo.zabbix.com/zabbix/5.x/rhel/8/x86_64/zabbix-release-5.x-x.xxx.xxxxx.rpm
-i = install
-v = --quiet + --verbose + --version
h =  --hash: print hash marks as package installs(good with -v)
dnf clean all
dnf install -y zabbix-proxy-sqlite3 zabbix-agent -zabbix-get zabbix-sender

mkdir /var/lib/zabbix
cd /var/lib
chown zabbix. -R zabbix/

vim /etc/zabbix/zabbix_proxy.conf:
ProxyMode = 0 #0 - Active, 1-Passive
Server=
    Se está como ativo precisa ser um único endereço.
    Se está como passivo: Pode ser adicionado vários endereços. Por exemplo, de uma pool de um cluster de Zabbix Server com Docker.
        Exemplo: Server=192.168.1.15, 192.168.1.0/24, zabbix.mon.xpto.com.br
Hostname=Nome_que_eu_definir
    Se nao estiver de acordo como gostaria. Caso contrario, pode pegar do hostname da maquina(Comentar a chave Hostname):
        Descomentar HostnameItem=system.hostname
DBName=/var/lib/zabbix/zabbix.db

----Configurações de retenção:
ProxyLocalBuffer=0 #em horas
    Quanto tempo vai reter no Proxy, localmente, mesmo após enviar para o server.
ProxyOfflineBuffer=24 #24 horas
HeartbeatFrequency= 60 #Envia uma mensagem pro Server informando que está disponível(Availability).
ConfigFrequency= 300 #Com qual frequência um Proxy ativo vai ir no Server buscar as configs.
DataSenderFrequency=1 #A cada 1 segundo o proxy irá encaminhar para o Server. Se for Ativo. Passivo o Server que coleta.

OBS.: Na primeira vez que ele inicia, cria o banco de dados.
    Se for atualizar a versão do banco, apagar o banco sqlite, que ele vai criar um novo quando iniciar a primeira vez após atualização.


tail -f -n 500 /var/log/zabbix/zabbix_proxy.log | less (Paginar o log)


----troubleshooting

Liberar porta 10051 no server:
    firewall-cmd --permanent --add-port=10051/tcp
    firewall-cmd --reload

"Cannot send proxy data to server at "IP": proxy "HOSTNAME" not found
    R: Precisa cadastrar o proxy:
        Administration > Proxies > Create Proxy.
            Ativo permite só colocar o nome. Ele que vem no Server.
            Passivo: Nome e IP.
            Obs.: O nome precisa ser igual.
    systemctl restart zabbix-proxy

zabbix_proxy -R config_cache_reload #(R = Runtime) Só funciona pra ativo.


----Zabbix Agent no Proxy:
Server=127.0.0.1 #Ele vai estar sendo monitorado pelo próprio proxy, ou seja, localhost.


=========================================
#Zabbix Get:
=========================================
Sintaxe:
zabbix_get -s host-or-ip -p Porta -I IP(Origem, se o servidor tiver mais de um IP) -k item-key
zabbix_get -v = version

zabbix_get -s 10.0.0.103 -p 10050 -k system.uname

----troubleshooting

Check access restrictions in Zabbix agent configuration
    R: Deixou monitorando a partir do Server. Se estiver Proxy, rodar no Proxy.


=========================================
#Items:
=========================================

https://www.zabbix.com/documentation/4.0/manual/appendix/items/supported_by_platform

Ativos e Passivos:
https://www.zabbix.com/documentation/3.0/pt/manual/appendix/items/activepassive


=========================================
#UserParameters:
=========================================
Time out para o comando:
Padrão = 3 segundos.
Máximo = 30 segundos.

Sintaxe:
UserParameter=<key>,<command>

Simples:
UserParameter=chave,echo "Teste"

Flexível(Com parâmetros):
UserParameter=chave.flex[*],echo $1

Include=/etc/zabbix/zabbix_agentd.d/*.conf
Pode ler todos os arquivos deste diretório.

UnsafeUserParameters=0
Allow all characters to be passed in arguments to user-defined parameters
\ ' " ` * ? [ ] { } ~ $ ! & ; ( ) < > | # @ 
=
UserParameter=ip.local,ifconfig enp0s3 | grep inet | head -n 1 | awk '{print $2}'
[root@localhost zabbix_agentd.d]# zabbix_agentd -t ip.local
ip.local                                      [t|192.168.0.124]

zabbix_get -s IP -k ip.local (A partir do Proxy)

--

UserParameter=ip.local.filter[*],ifconfig $1 | grep inet | head -n 1 | awk '{print $$2}'


=========================================
#Zabbix Trapper:
=========================================

----Zabbix Trapper, Zabbix Sender

zabbix_sender -V

http://repo.zabbix.com/zabbix/5.0/rhel/8/x86_64/zabbix-sender-5.0.4-1.el8.x86_64.rpm
rpm -ivh zabbix-sender-5.0.4-1.el8.x86_64.rpm
Se instalar o repo com all packages:
    dnf install -y zabbix-sender

Obs.:
    - Bom quando o item pode demorar mais de 30 segundos.
    - Existem libs para incorporar no código o monitoramento.
    - Itens do tipo Zabbix Trapper
        - A chave precisa estar criada no host, para o sender enviar.

zabbix_sender -z 127.0.0.1 -s "Server Linux IP Local" -k texto.livre -o "Texto Livre XPTO123
-z = Server Zabbix
-s = Hostname cadastrado no FrontEnd(Não IP ou DNS)
-k = Chave do item
-o = Valor


=========================================
#SNMP:
=========================================
Simple Network Management Protocol

SNMP GET - 161/UDP
    Gerente - NMS, Network Monitoring System (Zabbix) -->> Agente(Dispositivo de rede)

SNMP TRAP - 162/UDP
    Agente(Dispositivo de rede) -->> Gerente - NMS, Network Monitoring Syncer (Zabbix)

SMI - Structure of Management information
    - Define um conjunto de objetos que serão relacionados na MIB.
    - Divido em 3 partes:
        - MODULE-IDENTITY = Descrever as informações da MIB.
        - OBJECT-TYPE = Descreve os objetos gerenciados(É aqui que vamos monitorar)
        - NOTIFICATION-TYPE = Descreve os objetos de notificação(ENVIA-TRAP)

MIB - Management Information Base(MIB)
    - Define quais informações podem ser coletadas
    - Estrutura Hierárquica
    - OID - Object ID 

V1, V2, V3 - V3
    V1
        - Limite de 1 Gerente
        - Contadores limitados a 32 bits.
        - Controle de acesso baseado em comunidade
    V2
        - Chamada de SNMPv2c
        - Pode-se ter mais de um gerente
        - Introduzido o GetBulkRequest(Fazer request para mais de um OID)
        - Contadores de 64 bits
        - Controle de acesso baseado em comunidade
    V3
        - Mais segurança
        - Criptografia
        - Autenticação

----Instalar SNMP no CentOS:
    dnf install -y net-snmp 
    systemctl enable --now snmpd
    dnf install -y net-snmp-utils #Instalar client snmp

snmpwalk -v2c -c public 127.0.0.1 | wc -l
#39

Liberar todos os OIDs para consulta no servidor SNMP:
    vim /etc/snmp/snmpd.conf
    add: view   systemview  included .1 
    systemctl snmpd restart

snmpwalk -v2c -c public 127.0.0.1 | wc -l
6232

#Lista OIDs e tipo de dado
snmpwalk -On -v2c -c public 127.0.0.1

#Lista OID e nome:
[root@localhost ~]# snmptranslate .1.3.6.1.2.1.104.1.2.1.0
SCTP-MIB::sctpRtoAlgorithm.0
 

[root@localhost ~]# snmpwalk -v2c -c public 127.0.0.1 ifTable
IF-MIB::ifIndex.1 = INTEGER: 1
IF-MIB::ifIndex.2 = INTEGER: 2
IF-MIB::ifDescr.1 = STRING: lo
IF-MIB::ifDescr.2 = STRING: enp0s3
IF-MIB::ifType.1 = INTEGER: softwareLoopback(24)
IF-MIB::ifType.2 = INTEGER: ethernetCsmacd(6)
IF-MIB::ifMtu.1 = INTEGER: 65536
IF-MIB::ifMtu.2 = INTEGER: 1500
IF-MIB::ifSpeed.1 = Gauge32: 10000000
IF-MIB::ifSpeed.2 = Gauge32: 1000000000
IF-MIB::ifPhysAddress.1 = STRING: 
IF-MIB::ifPhysAddress.2 = STRING: 8:0:27:c8:71:9d
IF-MIB::ifAdminStatus.1 = INTEGER: up(1)
IF-MIB::ifAdminStatus.2 = INTEGER: up(1)
IF-MIB::ifOperStatus.1 = INTEGER: up(1)
IF-MIB::ifOperStatus.2 = INTEGER: up(1)
IF-MIB::ifLastChange.1 = Timeticks: (0) 0:00:00.00
IF-MIB::ifLastChange.2 = Timeticks: (0) 0:00:00.00
IF-MIB::ifInOctets.1 = Counter32: 37210461
IF-MIB::ifInOctets.2 = Counter32: 51293834
IF-MIB::ifInUcastPkts.1 = Counter32: 569865
IF-MIB::ifInUcastPkts.2 = Counter32: 124328
IF-MIB::ifInNUcastPkts.1 = Counter32: 0
IF-MIB::ifInNUcastPkts.2 = Counter32: 5914
IF-MIB::ifInDiscards.1 = Counter32: 0
IF-MIB::ifInDiscards.2 = Counter32: 11
IF-MIB::ifInErrors.1 = Counter32: 0
IF-MIB::ifInErrors.2 = Counter32: 0
IF-MIB::ifInUnknownProtos.1 = Counter32: 0
IF-MIB::ifInUnknownProtos.2 = Counter32: 0
IF-MIB::ifOutOctets.1 = Counter32: 37210461
IF-MIB::ifOutOctets.2 = Counter32: 33858197
IF-MIB::ifOutUcastPkts.1 = Counter32: 569865
IF-MIB::ifOutUcastPkts.2 = Counter32: 116673
IF-MIB::ifOutNUcastPkts.1 = Counter32: 0
IF-MIB::ifOutNUcastPkts.2 = Counter32: 0
IF-MIB::ifOutDiscards.1 = Counter32: 0
IF-MIB::ifOutDiscards.2 = Counter32: 0
IF-MIB::ifOutErrors.1 = Counter32: 0
IF-MIB::ifOutErrors.2 = Counter32: 0
IF-MIB::ifOutQLen.1 = Gauge32: 0
IF-MIB::ifOutQLen.2 = Gauge32: 0
IF-MIB::ifSpecific.1 = OID: SNMPv2-SMI::zeroDotZero
IF-MIB::ifSpecific.2 = OID: SNMPv2-SMI::zeroDotZero

snmpwalk -v2c -c public 127.0.0.1 | less
#less = Abre em paginação para ir visualizando.

[root@localhost ~]# snmpwalk -v2c -c public 127.0.0.1 sysDescr
SNMPv2-MIB::sysDescr.0 = STRING: Linux localhost.localdomain 4.18.0-193.el8.x86_64 #1 SMP Fri May 8 10:59:10 UTC 2020 x86_64

[root@localhost ~]# snmpwalk -v2c -c public 127.0.0.1 sysDescr
SNMPv2-MIB::sysDescr.0 = STRING: Linux localhost.localdomain 4.18.0-193.el8.x86_64 #1 SMP Fri May 8 10:59:10 UTC 2020 x86_64

[root@localhost ~]# snmpwalk -On -v2c -c public 127.0.0.1 SNMPv2-MIB::sysDescr.0
.1.3.6.1.2.1.1.1.0 = STRING: Linux localhost.localdomain 4.18.0-193.el8.x86_64 #1 SMP Fri May 8 10:59:10 UTC 2020 x86_64

http://oid-info.com/get/1.3.6.1.2.1.1.1
https://oidref.com/1.3.6.1.2.1.1.1

Description: 	
sysDescr OBJECT-TYPE
SYNTAX DisplayString (SIZE (0..255))
MAX-ACCESS read-only
STATUS current
DESCRIPTION
"A textual description of the entity. This value should
include the full name and version identification of
the system's hardware type, software operating-system,
and networking software."

[root@localhost ~]# snmpwalk -On -v2c -c public 127.0.0.1 1.3.6.1.2.1.1.1
.1.3.6.1.2.1.1.1.0 = STRING: Linux localhost.localdomain 4.18.0-193.el8.x86_64 #1 SMP Fri May 8 10:59:10 UTC 2020 x86_64

----Recarregar o cache após realizar cadastro na template, host, item, etc:
[root@localhost ~]# zabbix_server -R config_cache_reload
zabbix_server [53508]: command sent successfully

---
[root@localhost ~]# snmpwalk -On -v2c -c public 127.0.0.1 1.3.6.1.2.1.1.5
.1.3.6.1.2.1.1.5.0 = STRING: localhost.localdomain
DESCRIPTION:
1.3.6.1.2.1.1.5 	sysName 	0 	0 	An administratively-assigned name for this
managed node. By convention, this is the node's
fully-qualified domain name.


http://www.oidview.com/mibs/0/IF-MIB.html

=======LLD

[root@localhost ~]# snmpwalk -On -v2c -c public 127.0.0.1 1.3.6.1.2.1.2.1
.1.3.6.1.2.1.2.1.0 = INTEGER: 2

[root@localhost ~]# snmptranslate .1.3.6.1.2.1.2.1.0
IF-MIB::ifNumber.0
-> No item da template utilizar: ifNumber.0


#Descrição das interfaces de rede
[root@localhost ~]# snmpwalk -On -v2c -c public 127.0.0.1 1.3.6.1.2.1.2.2.1.2
.1.3.6.1.2.1.2.2.1.2.1 = STRING: lo
.1.3.6.1.2.1.2.2.1.2.2 = STRING: enp0s3

[root@localhost ~]# snmpwalk -v2c -c public 127.0.0.1 1.3.6.1.2.1.2.2.1.2
IF-MIB::ifDescr.1 = STRING: lo
IF-MIB::ifDescr.2 = STRING: enp0s3

Zabbix:
{#SNMPINDEX}=1, 2, 3, 4, ... 10 -> De acordo com a quantidade de interfaces no discovery, regra de descoberta
{#SNMPVALUE}= lo, enp0s3, eth0, eth1, etc

No cadastro de Dicovery Rules:
discovery[{#SMPVALUE},.1.3.6.1.2.1.2.2.1.2]

---

root@localhost ~]# snmpwalk -v2c -c public 127.0.0.1 1.3.6.1.2.1.2.2.1.8
IF-MIB::ifOperStatus.1 = INTEGER: up(1)
IF-MIB::ifOperStatus.2 = INTEGER: up(1)
[root@localhost ~]# snmpwalk -On -v2c -c public 127.0.0.1 1.3.6.1.2.1.2.2.1.8
.1.3.6.1.2.1.2.2.1.8.1 = INTEGER: up(1)
.1.3.6.1.2.1.2.2.1.8.2 = INTEGER: up(1)
---
http://www.oidview.com/mibs/14988/MIKROTIK-MIB.html


=========================================
#Simple Checks:
=========================================

name:
    Check port $3/$1
key:
    net.tcp.service[tcp, 10.0.0.40,22]


=========================================
#External Checks:
=========================================
Sintaxe:

nome_script[param1, param2]

Se não tiver parâmetro:
    nome_script[]
    nome_script

No Zabbix Server ou Proxy
ExternalScripts=/usr/lib/zabbix/externalscripts

---Se o script depender de variáveis de ambiente deve ser adicionadas no .bashrc do usuário Zabbix.
--- Utiliza a chave "Option: Timeout
    Timeout=3, maximo 30.


=========================================
#Triggers:
=========================================

Count:

{Template Mod Triggers:triggers.count(#3,10,eq)}=3

9 = 10 ? N
5 = 10 ? N  
10 = 10 ? S

Contador = 0 + 0 + 1 = 1

Trigger permanece ativa. Teria que ser 10, 10, 10.
